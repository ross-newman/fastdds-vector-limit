// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _TEST_H_
#define _TEST_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(test_SOURCE)
#define test_DllAPI __declspec( dllexport )
#else
#define test_DllAPI __declspec( dllimport )
#endif // test_SOURCE
#else
#define test_DllAPI
#endif
#else
#define test_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


typedef char T_Char;
typedef std::vector<T_Char> T_Payload;
/*!
 * @brief This class represents the structure I_Kit_Logging defined by the user in the IDL file.
 * @ingroup TEST
 */
class I_Kit_Logging
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport I_Kit_Logging();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~I_Kit_Logging();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object I_Kit_Logging that will be copied.
     */
    eProsima_user_DllExport I_Kit_Logging(const I_Kit_Logging &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object I_Kit_Logging that will be copied.
     */
    eProsima_user_DllExport I_Kit_Logging(I_Kit_Logging &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object I_Kit_Logging that will be copied.
     */
    eProsima_user_DllExport I_Kit_Logging& operator=(const I_Kit_Logging &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object I_Kit_Logging that will be copied.
     */
    eProsima_user_DllExport I_Kit_Logging& operator=(I_Kit_Logging &&x);

    /*!
     * @brief This function copies the value in member A_payload
     * @param _A_payload New value to be copied in member A_payload
     */
    eProsima_user_DllExport void A_payload(const T_Payload &_A_payload);

    /*!
     * @brief This function moves the value in member A_payload
     * @param _A_payload New value to be moved in member A_payload
     */
    eProsima_user_DllExport void A_payload(T_Payload &&_A_payload);

    /*!
     * @brief This function returns a constant reference to member A_payload
     * @return Constant reference to member A_payload
     */
    eProsima_user_DllExport const T_Payload& A_payload() const;

    /*!
     * @brief This function returns a reference to member A_payload
     * @return Reference to member A_payload
     */
    eProsima_user_DllExport T_Payload& A_payload();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const I_Kit_Logging& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    T_Payload m_A_payload;
};

#endif // _TEST_H_